!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","ui.bootstrap.datetimepicker","ui.dateTimeInput","angularjs-dropdown-multiselect"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(t){t.filters=[],t.removeChild=function(e){t.filters.splice(e,1)},t.addRule=function(){t.filters.push({})},t.addGroup=function(){t.filters.push({type:"group",subType:"must",rules:[]})},t.$watch("data.needsUpdate",function(a){a&&(t.filters=e.toFilters(t.data),t.data.needsUpdate=!1)}),t.$watch("filters",function(a){a&&(t.data.query=e.toQuery(t.filters,t.data))},!0)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilderChooser",["RecursionHelper",function(e){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilderGroup",["RecursionHelper",function(e){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,a){var n=e.group;e.addRule=function(){n.rules.push({})},e.addGroup=function(){n.rules.push({type:"group",subType:"must",rules:[]})},e.removeChild=function(e){n.rules.splice(e,1)}})}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var t=e.elasticFields,a=e.rule.field;if(t&&a)return(a in t?t[a]:t[a.replace(".analyzed","")]).type},e.resetRule=function(e){delete e.subType,delete e.value,delete e.date,delete e.values}}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var t=e.type;if(t)return"angular-elastic-builder/types/"+t+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){return~["equals","notEquals","contains","notContains","gt","gte","lt","lte"].indexOf(e.rule.subType)},e.numberNeeded=function(){return~["last","next"].indexOf(e.rule.subType)},e.rule.date||(e.rule.date=new Date),e.$watch("guide.choices",function(){e.guide&&"multi"===e.guide.type&&!e.rule.values&&(e.rule.values=[])})}}}])}(window.angular),function(e){"use strict";function t(e){var t=e.query,a=e.fields;return t.map(n.bind(null,a,!0,void 0,void 0))}function a(e,t,a){var n=t.fields;o=0;var s=e.map(l.bind(e,n,a)).filter(function(e){return!!e});return t.count=o,s}function n(e,t,a,l,r){!1!==t&&(t=!0);var o=Object.keys(r)[0],c=s();switch(o){case"bool":var p=Object.keys(r[o])[0];switch(p){case"must":c=i(),c.rules=r[o][p].map(n.bind(null,e,t,a,l)),c.subType="must";break;case"should":c=i(),c.rules=r[o][p].map(n.bind(null,e,t,a,l)),c.subType="should";break;case"must_not":c=n(e,!1,a,l,r[o][p])}break;case"has_parent":c=n(e,t,r[o].parent_type,l,r[o].query);break;case"nested":c=n(e,t,a,r[o].path,r[o].query);break;case"exists":c.field=u(e,r[o].field,a,l),c.subType=t?"exists":"notExists",delete c.value;break;case"term":case"terms":var p=Object.keys(r[o])[0];c.field=u(e,p,a,l);var d=e[c.field];switch(d.type){case"multi":var b=r[o][p];"string"!=typeof b&&"number"!=typeof b||(b=[b]),c.values=[],d.choices.forEach(function(e){-1!==b.indexOf(e.id)&&c.values.push({id:e.id})});break;case"date":c.subType=t?"equals":"notEquals",c.date=new Date(r[o][p]);break;case"term":case"number":c.subType=t?"equals":"notEquals",c.value=r[o][p];break;case"boolean":c.value=r[o][p];break;case"select":d.choices.forEach(function(e){r[o][p]===e.id&&(c.value=e)});break;case"contains":c.subType=t?"equals":"notEquals",c.value=r[o][p];break;default:throw new Error("unexpected type "+d.type)}break;case"range":var p=Object.keys(r[o])[0];c.field=u(e,p,a,l);var d=e[c.field];switch(d.type){case"date":var m;if(2===Object.keys(r[o][p]).length){if(m=r[o][p].gte,~m.indexOf("now-")){c.subType="last",c.value=parseInt(m.split("now-")[1].split("d")[0]);break}if(~m.indexOf("now")){c.subType="next",m=r[o][p].lte,c.value=parseInt(m.split("now+")[1].split("d")[0]);break}}else c.subType=Object.keys(r[o][p])[0],c.date=r[o][p][c.subType];break;case"number":c.subType=Object.keys(r[o][p])[0],c.value=r[o][p][c.subType]}break;case"match":var p=Object.keys(r[o])[0];c.field=u(e,p,a,l),"string"==typeof r[o][p]?(c.subType="matchAny",c.value=r[o][p]):"operator"in r[o][p]?(c.subType="and"===r[o][p].operator?"matchAll":"matchAny",c.value=r[o][p].query):"type"in r[o][p]&&"phrase"===r[o][p].type&&(c.subType="matchPhrase",c.value=r[o][p].query);break;case"match_phrase":var p=Object.keys(r[o])[0];p.endsWith(".analyzed")?c.field=u(e,p.replace(".analyzed",""),a,l):c.field=u(e,p,a,l);var d=e[c.field];switch(d.type){case"match":c.subType="matchPhrase",c.value=r[o][p];break;case"contains":c.subType=t?"contains":"notContains",c.value=r[o][p]}break;default:var p=Object.keys(r[o])[0];c.field=p}return c}function l(t,a,n){var s={};if("group"===n.type)return s.bool={},s.bool[n.subType]=n.rules.map(l.bind(n,t,a)).filter(function(e){return!!e}),s;var i=n.field;if(i){var u=t[i],c=u.field;switch(u.type){case"term":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;s.term={},s.term[c]=n.value;break;case"notEquals":if(void 0===n.value)return;s.bool={must_not:{term:{}}},s.bool.must_not.term[c]=n.value;break;case"exists":s.exists={field:c};break;case"notExists":s.bool={must_not:{exists:{field:c}}};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"contains":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;s.term={},s.term[c]=n.value;break;case"notEquals":if(void 0===n.value)return;s.bool={must_not:{term:{}}},s.bool.must_not.term[c]=n.value;break;case"contains":if(void 0===n.value)return;s.match_phrase={},s.match_phrase[c+".analyzed"]=n.value;break;case"notContains":if(void 0===n.value)return;s.bool={must_not:{match_phrase:{}}},s.bool.must_not.match_phrase[c+".analyzed"]=n.value;break;case"exists":s.exists={field:c};break;case"notExists":s.bool={must_not:{exists:{field:c}}};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"boolean":if(void 0===n.value)return;s.term={},s.term[c]=n.value;break;case"number":if(!n.subType)return;switch(n.subType){case"equals":if(void 0===n.value)return;s.term={},s.term[c]=n.value;break;case"notEquals":if(void 0===n.value)return;s.bool={must_not:{term:{}}},s.bool.must_not.term[c]=n.value;break;case"lt":case"lte":case"gt":case"gte":if(void 0===n.value)return;s.range={},s.range[c]={},s.range[c][n.subType]=n.value;break;case"exists":s.exists={field:c};break;case"notExists":s.bool={must_not:{exists:{field:c}}};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"date":if(!n.subType)return;switch(n.subType){case"equals":if(!e.isDate(n.date))return;s.term={},s.term[c]=r(a,n.date);break;case"notEquals":if(!e.isDate(n.date))return;s.bool={must_not:{term:{}}},s.bool.must_not.term[c]=r(a,n.date);break;case"lt":case"lte":case"gt":case"gte":if(!e.isDate(n.date))return;s.range={},s.range[c]={},s.range[c][n.subType]=r(a,n.date);break;case"last":if(!e.isNumber(n.value))return;s.range={},s.range[c]={},s.range[c].gte="now-"+n.value+"d",s.range[c].lte="now";break;case"next":if(!e.isNumber(n.value))return;s.range={},s.range[c]={},s.range[c].gte="now",s.range[c].lte="now+"+n.value+"d";break;case"exists":s.exists={field:c};break;case"notExists":s.bool={must_not:{exists:{field:c}}};break;default:throw new Error("unexpected subtype "+n.subType)}break;case"multi":if(void 0===n.values)return;s.terms={},s.terms[c]=[],n.values.forEach(function(e){s.terms[c].push(e.id)});break;case"select":if(void 0===n.value)return;s.term={},s.term[c]=n.value.id;break;case"match":if(!n.subType)return;switch(n.subType){case"matchAny":if(void 0===n.value)return;s.match={},s.match[c]=n.value;break;case"matchAll":if(void 0===n.value)return;s.match={},s.match[c]={},s.match[c].query=n.value,s.match[c].operator="and";break;case"matchPhrase":if(void 0===n.value)return;s.match_phrase={},s.match_phrase[c]=n.value;break;case"exists":s.exists={field:c};break;case"notExists":s.bool={must_not:{exists:{field:c}}};break;default:throw new Error("unexpected subtype "+n.subType)}break;default:throw new Error("unexpected type "+u.type)}return u.parent&&(s={has_parent:{parent_type:u.parent,query:s}}),u.nested&&(s={nested:{path:u.nested,query:s}}),o+=1,s}}function s(){var t={field:"",subType:"",value:""};return e.copy(t)}function i(){var t={type:"group",subType:"",rules:[]};return e.copy(t)}function r(t,a){return!!e.isDate(a)&&t("date")(a,"yyyy-MM-ddTHH:mm:ssZ")}function u(e,t,a,n){var l=Object.keys(e),s=Object.values(e);return l[s.indexOf(s.filter(function(e){return e.field===t&&e.parent===a||[n,e.field].join(".")===t&&e.nested===n})[0])]}var o;e.module("angular-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:t,toQuery:function(t,n){return a(t,n,e)}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="form-inline">\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="elastic-filter-item">\n        <div class="elastic-builder-rule-wrapper">\n          <div class="elastic-builder-rule">\n            <a class="btn btn-default" title="Add Rule" data-ng-click="addRule()">\n              <i class="fa fa-plus"></i>\n            </a>\n            <a class="btn btn-default" title="Add Group" data-ng-click="addGroup()">\n              <i class="fa fa-list"></i>\n            </a>\n          </div>\n        <div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div data-ng-if="item.type === \'group\'"\n  data-elastic-builder-group="item"\n  data-depth="{{ depth }}"\n  data-elastic-fields="elasticFields"\n  data-on-remove="onRemove()"\n  class="elastic-builder-rule-wrapper"></div>\n\n<div data-ng-if="item.type !== \'group\'"\n  data-elastic-builder-rule="item"\n  data-elastic-fields="elasticFields"\n  data-on-remove="onRemove()"\n  class="elastic-builder-rule-wrapper"></div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-rule elastic-builder-rule-group">\n  <div class="elastic-builder-group">\n    <h5>If\n      <select data-ng-model="group.subType" class="form-control">\n        <option value="must">all</option>\n        <option value="should">any</option>\n      </select>\n      of these conditions are met\n\n      <a class="btn btn-default remover" data-ng-click="onRemove()">\n        <i class="fa fa-times"></i>\n      </a>\n    </h5>\n\n    <div class="elastic-filter">\n      <div\n        class="elastic-filter-item"\n        data-ng-repeat="rule in group.rules"\n        data-elastic-builder-chooser="rule"\n        data-elastic-fields="elasticFields"\n        data-depth="{{ +depth + 1 }}"\n        data-on-remove="removeChild($index)"></div>\n\n      <div class="elastic-filter-item">\n        <div class="elastic-builder-rule-wrapper">\n          <div class="elastic-builder-rule">\n            <a class="btn btn-default" title="Add Sub-Rule" data-ng-click="addRule()">\n              <i class="fa fa-plus"></i>\n            </a>\n            <a class="btn btn-default" title="Add Sub-Group" data-ng-click="addGroup()">\n              <i class="fa fa-list"></i>\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <select class="form-control" data-ng-model="rule.field" data-ng-options="key as value.title for (key, value) in elasticFields" ng-change="resetRule(rule)"></select>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-default remover" data-ng-click="onRemove()">\n    <i class="fa fa-times"></i>\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/boolean.html",'<span class="boolean-rule">\n  <span class="rule-text">Equals</span>\n\n  \x3c!-- This is a weird hack to make sure these are numbers --\x3e\n  <span class="rule-value-group">\n    <select\n      class="form-control"\n      data-ng-model="rule.value"\n      data-ng-options="booleans.indexOf(choice) as choice for choice in booleansOrder">\n    </select>\n\n    <span class="rule-value-helptext" data-ng-if="guide.helpText">\n      {{ guide.helpText }}\n    </span>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/contains.html",'<span class="contains-rule">\n  <select data-ng-model="rule.subType" class="form-control">\n    \x3c!-- Term Options --\x3e\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    \x3c!-- Contains Options --\x3e\n    <optgroup label="Contains">\n      <option value="contains">Contains Phrase</option>\n      <option value="notContains">Does Not Contain Phrase</option>\n    </optgroup>\n\n    \x3c!-- Generic Options --\x3e\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n\n  </select>\n\n  <span class="rule-value-group" data-ng-if="inputNeeded()">\n    <input\n      type="text"\n      class="form-control"\n      placeholder="{{ guide.placeholder ? guide.placeholder : \'\' }}"\n      data-ng-model="rule.value" />\n\n    <span class="rule-value-helptext" data-ng-if="guide.helpText">\n      {{ guide.helpText }}\n    </span>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/date.html",'<span class="date-rule form-inline">\n  <select data-ng-model="rule.subType" class="form-control">\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n    <optgroup label="Unbounded-range">\n      <option value="lt">&lt;</option>\n      <option value="lte">&le;</option>\n      <option value="gt">&gt;</option>\n      <option value="gte">&ge;</option>\n    </optgroup>\n    <optgroup label="Bounded-range">\n      <option value="last">In the last</option>\n      <option value="next">In the next</option>\n    </optgroup>\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n\n  <div class="form-group" data-ng-if="inputNeeded()">\n    <div class="input-group">\n      <input type="text" class="form-control" data-ng-model="rule.date" data-date-time-input="YYYY-MM-DDTHH:mm:ssZ" size=25>\n      <div class="input-group-btn">\n        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n          <span><i class="fa fa-calendar"></i></span>\n        </button>\n        <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dLabel">\n          <datetimepicker data-ng-model="rule.date" data-datetimepicker-config="{ dropdownSelector: \'.dropdown-toggle\' }"/>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n  <span data-ng-if="numberNeeded()">\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0> <span class="rule-text">days</span>\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/match.html",'<span class="match-rule">\n  <select data-ng-model="rule.subType" class="form-control">\n    \x3c!-- Term Options --\x3e\n    <optgroup label="Contains">\n      <option value="matchAll">Contains All Words</option>\n      <option value="matchAny">Contains Any Words</option>\n      <option value="matchPhrase">Contains Phrase</option>\n    </optgroup>\n\n    \x3c!-- Generic Options --\x3e\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n\n  <span class="rule-value-group">\n    <input\n      type="text"\n      class="form-control"\n      placeholder="{{ guide.placeholder ? guide.placeholder : \'\' }}"\n      data-ng-model="rule.value" />\n\n    <span class="rule-value-helptext" data-ng-if="guide.helpText">\n      {{ guide.helpText }}\n    </span>\n  </span>\n\n</span>\n'),e.put("angular-elastic-builder/types/multi.html",'<span class="multi-rule">\n  <span class="rule-text">In</span>\n\n  <div class="multiselect-wrapper" ng-dropdown-multiselect="" options="guide.choices" selected-model="rule.values" checkboxes="true"></div>\n</span>\n'),e.put("angular-elastic-builder/types/number.html",'<span class="number-rule">\n  <select data-ng-model="rule.subType" class="form-control">\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n    <optgroup label="Range">\n      <option value="gt">&gt;</option>\n      <option value="gte">&ge;</option>\n      <option value="lt">&lt;</option>\n      <option value="lte">&le;</option>\n    </optgroup>\n\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n  </select>\n\n  \x3c!-- Range Fields --\x3e\n  <span class="rule-value-group" data-ng-if="inputNeeded()">\n    <input\n      class="form-control"\n      type="number"\n      step="any"\n      min="{{ guide.minimum }}"\n      max="{{ guide.maximum }}"\n      placeholder="{{ guide.placeholder ? guide.placeholder : \'\' }}"\n      data-ng-model="rule.value" />\n\n    <span class="rule-value-helptext" data-ng-if="guide.helpText">\n      {{ guide.helpText }}\n    </span>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/select.html",'<span class="select-rule">\n  <span class="rule-text">Equals</span>\n\n  <span class="rule-value-group">\n    <select\n      class="form-control"\n      data-ng-model="rule.value"\n      data-ng-options="choice as choice.label for choice in guide.choices track by choice.id">\n    </select>\n\n    <span class="rule-value-helptext" data-ng-if="guide.helpText">\n      {{ guide.helpText }}\n    </span>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/term.html",'<span class="term-rule">\n  <select data-ng-model="rule.subType" class="form-control">\n    \x3c!-- Term Options --\x3e\n    <optgroup label="Exact">\n      <option value="equals">Equals</option>\n      <option value="notEquals">Not Equals</option>\n    </optgroup>\n\n    \x3c!-- Generic Options --\x3e\n    <optgroup label="Generic">\n      <option value="exists">Exists</option>\n      <option value="notExists">Not Exists</option>\n    </optgroup>\n\n  </select>\n\n  <span class="rule-value-group" data-ng-if="inputNeeded()">\n    <input\n      type="text"\n      class="form-control"\n      placeholder="{{ guide.placeholder ? guide.placeholder : \'\' }}"\n      data-ng-model="rule.value" />\n\n    <span class="rule-value-helptext" data-ng-if="guide.helpText">\n      {{ guide.helpText }}\n    </span>\n  </span>\n</span>\n')}])}(window.angular);